VS CODE
#include <stdlib.h>
#include <stdio.h>
#include <time.h>

int check_int_input()
{
    int readinput;
    int input;
    char inputchar;

    while (1)
    {
        readinput = scanf("%d", &input);
        scanf("%c", &inputchar);
        if (readinput != 0 && inputchar == '\n' && (int)input == input)
        {
            return input;
        }
        else
        {
            printf("Incorrect input. Try again. \n");
            rewind(stdin);
        }
    }
}

void sorting(int *array, int left, int mid, int right)
{
    // printf("Test \nfirst  = %d last = %d \n", left, right);
    int step_left = 0, step_right = 0;
    int *result = (int *)malloc((right - left + 1) * sizeof(int));
    while (left + step_left < mid && mid + step_right < right)
    {
        if (array[left + step_left] < array[mid + step_right])
        {
            result[step_left + step_right] = array[left + step_left];
            // printf("(between %d %d) result[%d] from left array[%d] = %d\n", array[left + step_left], array[mid + step_right], step_left + step_right, left + step_left, result[step_left + step_right]);
            step_left++;
        }
        else
        {
            result[step_left + step_right] = array[mid + step_right];
            // printf("(between %d %d) result[%d] from right array[%d] = %d\n", array[left + step_left], array[mid + step_right], step_left + step_right, mid + step_right, result[step_left + step_right]);
            step_right++;
        }
    }
    while (left + step_left < mid)
    {
        result[step_left + step_right] = array[left + step_left];
        // printf("additional result[%d] from left array[%d] = %d\n", step_left + step_right, left + step_left, result[step_left + step_right]);
        step_left++;
    }
    while (mid + step_right < right)
    {
        result[step_left + step_right] = array[mid + step_right];
        // printf("additional result[%d] from right array[%d] = %d\n", step_left + step_right, mid + step_right, result[step_left + step_right]);
        step_right++;
    }

    for (int i = 0; i < step_left + step_right; i++)
        array[left + i] = result[i];
    free(result);
    // printf("Testing, sorted array from %d to %d: \n", left, right);
    /*for (int i = left; i < right; i++)
        printf("%d ", array[i]);
    printf("\n");*/
}

void mergeSortingRecursive(int *array, int left, int right)
{
    if (left + 1 >= right)
        return;
    int mid = (left + right) / 2;
    mergeSortingRecursive(array, left, mid);
    mergeSortingRecursive(array, mid, right);
    sorting(array, left, mid, right);
}

int main()
{
    // srand((int)time(NULL));
    while (1)
    {
        printf("Enter number of array elements: ");
        long size;
        size = check_int_input();
        while (size <= 0)
        {
            printf("Incorrect input. Try again. \nEnter number of array elements:");
            size = check_int_input();
        }
        // scanf_s("%ld", &size);
        int *arr = (int *)malloc(size * sizeof(int));
        for (int i = 0; i < size; i++)
            arr[i] = rand() % 20 - 10;

        for (int i = 0; i < size; i++)
            printf("%d ", arr[i]);
        printf("\n");
        mergeSortingRecursive(arr, 0, size);
        // mergeSortingIter(arr, size);

        for (int i = 0; i < size; i++)
            printf("%d ", arr[i]);
        printf("\n");
    }
    getchar();
    return 0;
}

VS
#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include <iostream>

int check_int_input()
{
    int readinput;
    int input;
    char inputchar;

    while (1)
    {
        readinput = scanf_s("%d", &input);
        scanf_s("%c", &inputchar);
        if (readinput != 0 && inputchar == '\n' && (int)input == input)
        {
            return input;
        }
        else
        {
            printf("Incorrect input. Try again. \n");
            rewind(stdin);
        }
    }
}

void sorting(int* array, int left, int mid, int right)
{
    // printf("Test \nfirst  = %d last = %d \n", left, right);
    int step_left = 0, step_right = 0;
    int* result = (int*)malloc((right - left + 1) * sizeof(int));
    while (left + step_left < mid && mid + step_right < right)
    {
        if (array[left + step_left] < array[mid + step_right])
        {           
            result[step_left + step_right] = array[left + step_left];
            //printf("(between %d %d) result[%d] from left array[%d] = %d\n", array[left + step_left], array[mid + step_right], step_left + step_right, left + step_left, result[step_left + step_right]);
            step_left++;
        }
        else
        {
            result[step_left + step_right] = array[mid + step_right];
            //printf("(between %d %d) result[%d] from right array[%d] = %d\n", array[left + step_left], array[mid + step_right], step_left + step_right, mid + step_right, result[step_left + step_right]);
            step_right++;
        }
    }
    while (left + step_left < mid)
    {
        result[step_left + step_right] = array[left + step_left];
        //printf("additional result[%d] from left array[%d] = %d\n", step_left + step_right, left + step_left, result[step_left + step_right]);
        step_left++;
    }
    while (mid + step_right < right)
    {
        result[step_left + step_right] = array[mid + step_right];
        //printf("additional result[%d] from right array[%d] = %d\n", step_left + step_right, mid + step_right, result[step_left + step_right]);
        step_right++;
    }

    for (int i = 0; i < step_left + step_right; i++)
        array[left + i] = result[i];

    //printf("Testing, sorted array from %d to %d: \n", left, right);
    /*for (int i = left; i < right; i++)
        printf("%d ", array[i]);
    printf("\n");*/
}

void mergeSortingRecursive(int* array, int left, int right)
{
    if (left + 1 >= right)
        return;
    int mid = (left + right) / 2;
    mergeSortingRecursive(array, left, mid);
    mergeSortingRecursive(array, mid, right);
    sorting(array, left, mid, right);
}

int main()
{
    // srand((int)time(NULL));
    while (1)
    {
        printf("Enter number of array elements: ");
        long size = check_int_input();
        //scanf_s("%ld", &size);
        int* arr = (int*)malloc(size * sizeof(int));
        for (int i = 0; i < size; i++)
            arr[i] = rand() % 20 - 10;

        for (int i = 0; i < size; i++)
            printf("%d ", arr[i]);
        printf("\n");
        mergeSortingRecursive(arr, 0, size);
        //mergeSortingIter(arr, size);

        for (int i = 0; i < size; i++)
            printf("%d ", arr[i]);
        printf("\n");
    }
    getchar();
    return 0;
}